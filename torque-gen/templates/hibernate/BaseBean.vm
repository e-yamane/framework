package ${package}.base;

#set ($abstract = "")
#set ($description = $table.description)
#if ($description = "")
#set ($description = $table.Name.toUpperCase)
#end

##set( $isPropertySkip = false )
##if ( $table.isSkipSql() && !$table.isAbstract() )
##set( $isPropertySkip = true )
##end

import  java.io.Serializable;
#set ($dispImportDate = "false")
#set ($dispImportBigDecimal = "false")
#foreach ($col in $table.Columns)
#if($col.JavaNative == "Date" && $dispImportDate == "false")
#if(!$col.primaryKey || $table.PrimaryKey.size() == 1)
import  java.util.Date;
#set ($dispImportDate = "true")
#end
#end
#if($col.JavaNative == "BigDecimal" && $dispImportBigDecimal == "false")
#if(!$col.primaryKey || $table.PrimaryKey.size() == 1)
import  java.math.BigDecimal;
#set ($dispImportBigDecimal = "true")
#end
#end
#end

#set ($foreignTable = $table.database.getTableByJavaName("$table.baseClass"))
#set ($foreignTableName = "$!foreignTable.name" )

#set ($extends = "")
#if($table.baseClass != "BaseObject")
#set($foreignTable = $table.database.getTableByJavaName("$table.baseClass"))
#if($foreignTable)
#set ($extends = "extends ${foreignTable.package}.${table.baseClass}$!{table.baseSignature}")
#else
#set ($extends = "extends ${table.baseClass}$!{table.baseSignature}")
#end
#end
/**
 * $descriptionのHibernateマッピングベースクラス
#if(!$tbl.isSkipSql())
#if($table.baseClass == "BaseObject")
 * @hibernate.class
 *    table="$table.Name.toUpperCase()"
 *    realClass="${package}.${table.JavaName}"
#else
#if(!$foreignTable)
 * @hibernate.class
 *    table="$table.Name.toUpperCase()"
 *    realClass="${package}.${table.JavaName}"
#elseif($foreignTable.isSkipSqlOrg())
 * @hibernate.class
 *    table="$table.Name.toUpperCase()"
 *    realClass="${package}.${table.JavaName}"
#else
 * @hibernate.joined-subclass-gg
 *    realClass="${package}.${table.JavaName}"
 *    table="$table.Name.toUpperCase()"
 * @hibernate.joined-subclass-key
#foreach($fk in $table.foreignKeys)
#if($fk.foreignTableName.toUpperCase() == $foreignTable.name.toUpperCase())
#foreach($fkc in $fk.localColumns)
 *    column="$fkc.toUpperCase()"
#end
#end
#end
#end
#end
#if ($table.ChildrenColumn)
 *  @hibernate.discriminator
 *    column="$table.ChildrenColumn.name.toUpperCase()"    
 *    realClass="${package}.${table.JavaName}"
#end
#end
**/
##ユニークアノテーションの追加
#set ($unqCheck = "")
#foreach ($unique in $table.Unices)
#set ($unqCheck="x")
#end
#if($unqCheck == "x")
@${frameworkPrefix}.commons.service.annotation.Unique(
    entity="${table.JavaName}",
    groups= {
#set ($grpDelimiter = " ")
#foreach ($unique in $table.Unices)
        $grpDelimiter @${frameworkPrefix}.commons.service.annotation.Check(properties={
#set ($propDelimiter = " ")
#foreach($column in $unique.columns)
#set($propName = $table.getColumn($column).uncapitalisedJavaName)
#foreach ($fk in $table.ForeignKeys)
#foreach($localColumn in $fk.LocalColumns)
#if($localColumn == $column)
#set($propName = $fk.name)
#end
#end
#end
            $propDelimiter "$propName"
#set ($propDelimiter = ",")
#end
        })
#set ($grpDelimiter = ",")
#end
    }
)
#end
#*
##MHI original.
#if($table.ryousaTelegram)
$generator.parse("hibernate/telegramAnno.vm", "", "table", $table)
#end
*#
public abstract class $basePrefix${table.JavaName}$!{table.signature} $extends implements Serializable {
##デフォルトコンストラクタ
    public $basePrefix${table.JavaName}() {
    }

##PKの数のチェック
#if ($table.PrimaryKey.size() > 1)
##PKクラスの生成
#set ( $pkName = "${table.JavaName}PK" )
#set ( $fname = "${pkName}.java" )
#set ( $path = "${strings.getPackageAsPath($package)}$fname" )
$generator.parse("hibernate/PK.vm", $path,"table",$table)

##主キーのアクセサ
    /**
     * 主キー
    **/
    private ${package}.$pkName pk = new ${package}.$pkName();
    
    /**
     * 主キーを取得する
     * @hibernate.id
     *    generator-class="assigned"
     * @return 主キー
    **/
    public ${package}.$pkName getComp_id() {
        return pk;
    }

    /**
     * 主キーを設定する
     * @param pk 主キー
    **/
    public void setComp_id(${package}.$pkName pk) {
        this.pk = pk;
    }
    
    public int hashCode() {
        if(getComp_id() == null) {
            return super.hashCode();
        } else {
            return getComp_id().hashCode();
        }
    }
    
    public boolean equals(Object o) {
        if(getComp_id() == null) {
            return super.equals(o);
        } else {
          return getComp_id().equals(o);
        }
    }
    
#else
#foreach ($colPK in $table.PrimaryKey)
#set ( $cfcPK=$colPK.JavaName )
#set ( $cloPK=$colPK.UncapitalisedJavaName )
#set ( $cjtypePK = $colPK.JavaNative )
#set ($description = $colPK.description)
#if ($description == "")
#set ($description = $colPK.name.toUpperCase)
#end
    /**
     * $description
    **/ 
#if($cjtypePK.endsWith("Boolean"))
    private $cjtypePK $cloPK = Boolean.FALSE;
#else
    private $cjtypePK $cloPK;
#end

#set($suffix = "")
#set($suffix = "")
#if("BOOLEANCHAR" == $col.torqueType )
#set($suffix = "InDB")
#end
#if("BOOLEANCHAR" == $col.torqueType)
#set($suffix = "InDB")
#end
    public final static String ${colPK.Name.toUpperCase()} = "$cloPK.trim()$suffix";
##主キーのアクセサ
    /**
     * $descriptionを取得する
     * @hibernate.id
     *    generator-class="assigned"
     *    column="$colPK.name.toUpperCase()"
     *    not-null="$colPK.notNull"
#if ($colPK.size != "")
     *    length="$colPK.size"
#end
#if($colPK.autoIncrement)
     * @hibernate.version
#end
     * @return $colPK.description
    **/
#if("BOOLEANCHAR" == $col.torqueType)
## トレサオリジナル
#if($table.JavaName != "BasicInformation" && $table.JavaName != "LogicalDeleteEntity")
#if(!$colPK.autoIncrement)
    @${frameworkPrefix}.commons.service.annotation.MaxLength(length=1, property="${table.JavaName}.${cfcPK}")
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${cfcPK}")
#end
#end
##
    public String get${cfcPK}InDB() {
        return ($cloPK) ? "Y" : "N";
    }

    /**
     * $descriptionを取得する
     * @return $colPK.description
    **/
    public $cjtypePK is${cfcPK}() {
        return $cloPK;
    }

    /**
     * $descriptionを取得する
     * @return $colPK.description
    **/
    public $cjtypePK get${cfcPK}() {
        return $cloPK;
    }
#elseif("BOOLEANINT" == $col.torqueType)
## トレサオリジナル
## トレサオリジナル
#if($table.JavaName != "BasicInformation" && $table.JavaName != "LogicalDeleteEntity")
#if(!$colPK.autoIncrement)
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${cfcPK}")
#end
#end
##
    public int get${cfcPK}InDB() {
      return ($cloPK) ? 1 : 0;
    }

    /**
     * $descriptionを取得する
     * @return $colPK.description
    **/
    public $cjtypePK is${cfcPK}() {
        return $cloPK;
    }

    /**
     * $descriptionを取得する
     * @return $colPK.description
    **/
    public $cjtypePK get${cfcPK}() {
        return $cloPK;
    }
#else 

    public $cjtypePK get${cfcPK}() {
        return $cloPK;
    }
#end

#if("BOOLEANCHAR" == $col.torqueType)
    /**
     * $descriptionを設定する
     * @param $cloPK  $colPK.description
    **/
    public void set${cfcPK}InDB(String $cloPK) {
    this.$cloPK = ("Y".equalsIgnoreCase($cloPK));
    }
#elseif("BOOLEANINT" == $col.torqueType)
    /**
     * $descriptionを設定する
     * @param $cloPK  $colPK.description
    **/
    public void set${cfcPK}InDB(int $cloPK) {
    this.$cloPK = ($cloPK != 0);
    }
#end
    /**
     * $descriptionを設定する
     * @param $cloPK  $colPK.description
    **/
    public void set${cfcPK}($cjtypePK $cloPK) {
        this.$cloPK = $cloPK;
    }
    
    public int hashCode() {
#if ($colPK.primitive)
        return (int)get${cfcPK}();
#else
        if(get${cfcPK}() == null) {
            return super.hashCode();
        } else {
            return get${cfcPK}().hashCode();
        }
#end
    }
    
    public boolean equals(Object o) {
        if(o instanceof $basePrefix${table.JavaName}) {
#if ($colPK.primitive)
            if(hashCode() == o.hashCode()) {
#else
            if(hashCode() == o.hashCode()) {
#end
                $basePrefix${table.JavaName} obj = ($basePrefix${table.JavaName})o;
                if(get${cfcPK}() == null) {
                    return super.equals(o);
                }
                return get${cfcPK}().equals(obj.get${cfcPK}());
            }
        }
        return false;
    }
#end
#end

##主キー以外のプロファイルのアクセサ
#foreach ($col in $table.Columns)
##MHI original.
#if(!$col.skipColumn)
#if(!$col.primaryKey)
#if($col.foreignKey)
##外部キーの参照なのでプロパティは展開しません。
#elseif($col.inheritance)
##継承キーなのでプロパティの展開はしません。
#elseif($table.database.getTable($col.torqueType))
#set ( $refTable = $table.database.getTable($col.torqueType) )
#set ( $cfc= $col.JavaName)
#set ( $clo=$col.UncapitalisedJavaName )
#set ( $cjtype= "${refTable.package}.${refTable.javaName}")
#set ($description = $col.description)
#if  ($description == "")
#set ($description = $col.name.toUpperCase)
#end
    /**
     * $description
    **/ 
    private $cjtype $clo =  new $cjtype();

    public final static String ${col.Name.toUpperCase()} = "${clo.trim()}.";

    /**
     * $descriptionを取得する
     * @hibernate.component
     *    prefix="${col.Name}_"
     * @return $col.description
    **/
#if($col.notNull)
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${clo}")
#end
    @${frameworkPrefix}.commons.service.annotation.NestedComponent(property="${table.JavaName}.${clo}")
    public $cjtype get${cfc}() {
        return $clo;
    }

    /**
     * $descriptionを設定する
     * @param $clo  $col.description
    **/
    public void set${cfc}($cjtype $clo) {
        this.$clo = $clo;
    }

#else
#set ( $cfc=$col.JavaName )
#set ( $clo=$col.UncapitalisedJavaName )
#set ( $cjtype = $col.JavaNative )
#set ($description = $col.description)
#if ($description == "")
#set ($description = $col.name.toUpperCase)
#end
    /**
     * $description
    **/ 
#if($cjtype.endsWith("Boolean"))
    private $cjtype $clo = Boolean.FALSE;
#else
    private $cjtype $clo;
#end
#set($suffix = "")
#if("BOOLEANCHAR" == $col.torqueType )
#set($suffix = "InDB")
#end
#if("BOOLEANCHAR" == $col.torqueType)
#set($suffix = "InDB")
#end
    public final static String ${col.Name.toUpperCase()} = "${clo.trim()}$suffix";

    /**
     * $descriptionを取得する
#if ($col.autoIncrement)
     * @hibernate.version
     *    column="$col.name.toUpperCase()"
#else
     * @hibernate.property
##if( !$isPropertySkip )
     *    column="$col.name.toUpperCase()"
##end
     *    not-null="$col.notNull"
#if ($col.size != "")
     *    length="$col.size"
#end
#end
     * @return $col.description
    **/
#if("BOOLEANCHAR" == $col.torqueType)
## トレサオリジナル
#if($table.JavaName != "BasicInformation" && $table.JavaName != "LogicalDeleteEntity")
#if (!$col.autoIncrement)
    @${frameworkPrefix}.commons.service.annotation.MaxLength(length=1, property="${table.JavaName}.${clo}")
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${clo}")
#end
#end
##
    public String get${cfc}InDB() {
        return ($clo) ? "Y" : "N";
    }

    /**
     * $descriptionを取得する
     * @return $col.description
    **/
    public $cjtype is${cfc}() {
        return $clo;
    }

    /**
     * $descriptionを取得する
     * @return $col.description
    **/
    public $cjtype get${cfc}() {
        return $clo;
    }

#elseif("BOOLEANINT" == $col.torqueType)
## トレサオリジナル
#if($table.JavaName != "BasicInformation" && $table.JavaName != "LogicalDeleteEntity")
#if(!$col.autoIncrement)
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${clo}")
#end
#end
##
    public int get${cfc}InDB() {
        return ($clo) ? 1 : 0;
    }

    /**
     * $descriptionを取得する
     * @return $col.description
    **/
    public $cjtype is${cfc}() {
        return $clo;
    }

    /**
     * $descriptionを取得する
     * @return $col.description
    **/
    public $cjtype get${cfc}() {
        return $clo;
    }
#else 
## トレサオリジナル
#if($table.JavaName != "BasicInformation" && $table.JavaName != "LogicalDeleteEntity")
#if(!$col.autoIncrement)
#if($col.size != "")
    @${frameworkPrefix}.commons.service.annotation.MaxLength(length=${col.size}, property="${table.JavaName}.${clo}")
#end
#if($col.notNull)
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${clo}")
#end
##MHI original.
#end
#end
##
    public $cjtype get${cfc}() {
        return $clo;
    }
#end

#if("BOOLEANCHAR" == $col.torqueType)
    /**
     * $descriptionを設定する
     * @param $clo  $col.description
    **/
    public void set${cfc}InDB(String $clo) {
        this.$clo = ("Y".equalsIgnoreCase($clo));
    }

#elseif("BOOLEANINT" == $col.torqueType)
    /**
     * $descriptionを設定する
     * @param $clo  $col.description
    **/
    public void set${cfc}InDB(int $clo) {
        this.$clo = ($clo != 0);
    }

#end
    /**
     * $descriptionを設定する
     * @param $clo  $col.description
    **/
    public void set${cfc}($cjtype $clo) {
        this.$clo = $clo;
    }


#end
#end
#end
#end

#set($pVars = [])  ## Array of object set method names for later reference.
#set($aVars = [])  ## Array of object field names for later reference.
#foreach ($fk in $table.ForeignKeys)
  #if($fk.foreignTableName.toUpperCase() != $foreignTableName.toUpperCase())
    #set ($isPKFK = "false")
    #set ($isNotNull = "false")
    #foreach ($columnName in $fk.LocalColumns)
      #set ( $column = $table.getColumn($columnName) )
      #if($column.primaryKey)
        #set($isPKFK = "true")
      #end
      #if($column.notNull)
        #set ($isNotNull = "true")
        #set ($colBackup = $column.uncapitalisedJavaName)
      #end
    #end
    #if($isPKFK == "false")
      #set ( $tblFK = $table.Database.getTable($fk.foreignTableName) )
      #set ( $className = $tblFK.JavaName )
      #set ( $fullClassName = "${tblFK.getPackage()}.${className}" )
      #set ( $relCol = "" )
      #foreach ($columnName in $fk.LocalColumns)
        #set ( $column = $table.getColumn($columnName) )
        #if ($column.isMultipleFK() || $fk.ForeignTableName.equals($table.Name))
          #set ( $relCol = "$relCol$column.JavaName" )
        #end
      #end
      #if ($relCol != "")
        #set ( $relCol = "RelatedBy$relCol" )
      #end
      ##set ( $pVarName = "$className$relCol" )
      ##set ( $varName = "a$pVarName" )
      #set ( $pVarName = "$fk.name")
      #set ( $varName = "$pVarName" )
      #set ( $retVal = $pVars.add($pVarName) )
      #set ( $retVal = $aVars.add($varName) )

    private $fullClassName $varName;
    public final static String $varName.toUpperCase() = "$varName";

#set ($fkCols = "")
###foreach ($columnName in $fk.LocalColumns)
##  #set ($fkCols = "$fkCols,$columnName.toUpperCase()")
###end
##set ($fkCols = $fkCols.substring(1))
    /**
     * Get the associated $className object
     * @hibernate.many-to-one
     *   outer-join = "true"
#foreach ($columnName in $fk.LocalColumns)
     * @hibernate.column name = "$columnName.toUpperCase()"
#end
##     *   column = "$fkCols"
     *
     * @return the associated $className object
     */
##    public $className get${pVarName}() {
#if($isNotNull == "true")
    @${frameworkPrefix}.commons.service.annotation.NotNull(property="${table.JavaName}.${colBackup}")
#end
    public $fullClassName get${fk.nameUpperFirstChar}() {
        return this.$varName;
    }

    /**
     * Declares an association between this object and a $className object
     *
     * @param v $className
     */
    public void set${fk.nameUpperFirstChar}($fullClassName v) {
        this.$varName = v;
    }

#if(${table.JavaName} == $tblFK.JavaName)
    @${frameworkPrefix}.commons.service.annotation.PostLoad
    public void load${fk.nameUpperFirstChar}s() {
        $fullClassName $varName = get${fk.nameUpperFirstChar}();
        if($varName != null) {
            $fullClassName tmp = ${varName}.get${fk.nameUpperFirstChar}();
            if(tmp != null) {
                $cjtypePK pk = tmp.get${cfcPK}();
                ${varName}.set${fk.nameUpperFirstChar}(
                        ${frameworkPrefix}.commons.service.BasicService.getService().findByPK(${fullClassName}.class, pk));
            }
        }
    }
#else
    @${frameworkPrefix}.commons.service.annotation.PostLoad
    public void load${fk.nameUpperFirstChar}() {
#if($tblFK.PrimaryKey.size() > 1)
#set ( $FKPkType = "${package}.$(tblFK.JavaName}PK")
#set ( $FKPKGetter = "getComp_id")
#else
#foreach ($colPK in $tblFK.PrimaryKey)
#set ( $cfcFKPK=$colPK.JavaName )
#set ( $cloFKPK=$colPK.UncapitalisedJavaName )
#set ( $FKPkType = $colPK.JavaNative )
#set ( $FKPKGetter = "get${cfcFKPK}")
#end
#end
        $fullClassName $varName = get${fk.nameUpperFirstChar}();
        if($varName != null) {
            $FKPkType pk = ${varName}.${FKPKGetter}();
            set${fk.nameUpperFirstChar}(
                    ${frameworkPrefix}.commons.service.BasicService.getService().findByPK(${fullClassName}.class, pk)
            );
        }
    }
#end
    #end
  #end
#end

    private static final long serialVersionUID = 1L;
}